Index: MyApplication/app/src/main/java/com/example/myapplication/Activities/CafeDetailActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.myapplication.Activities;\r\n\r\nimport android.os.Bundle;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.widget.AdapterView;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.ImageView;\r\nimport android.widget.RatingBar;\r\nimport android.widget.Spinner;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\nimport androidx.activity.result.ActivityResultLauncher;\r\nimport androidx.activity.result.contract.ActivityResultContracts;\r\nimport androidx.appcompat.app.AlertDialog;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport com.example.myapplication.R;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.firestore.DocumentReference;\r\nimport com.google.firebase.firestore.FirebaseFirestore;\r\nimport com.squareup.picasso.Picasso;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\npublic class CafeDetailActivity extends AppCompatActivity {\r\n\r\n    private TextView tvCafeName, tvRating, tvAddress, tvDescription, tvActivity;\r\n    private ImageView ivCafeImage;\r\n    private Button btnReview;\r\n    private FirebaseFirestore db;\r\n    private FirebaseAuth mAuth;\r\n    private String cafeId, userId;\r\n    private ActivityResultLauncher<String> imagePickerLauncher;\r\n    private ActivityResultLauncher<String> videoPickerLauncher;\r\n    private List<String> selectedImages = new ArrayList<>(); // Lưu danh sách URL hình ảnh (giả lập)\r\n    private String selectedVideo = null; // Lưu URL video (giả lập)\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_cafe_detail);\r\n\r\n        // Khởi tạo Firestore và Auth\r\n        db = FirebaseFirestore.getInstance();\r\n        mAuth = FirebaseAuth.getInstance();\r\n\r\n        // Lấy userId\r\n        if (mAuth.getCurrentUser() != null) {\r\n            userId = mAuth.getCurrentUser().getUid();\r\n        }\r\n\r\n        // Khởi tạo các view\r\n        tvCafeName = findViewById(R.id.tv_cafe_name);\r\n        tvRating = findViewById(R.id.tv_rating);\r\n        tvAddress = findViewById(R.id.tv_address);\r\n        tvDescription = findViewById(R.id.tv_description);\r\n        tvActivity = findViewById(R.id.tv_activity);\r\n        ivCafeImage = findViewById(R.id.iv_cafe_image);\r\n        btnReview = findViewById(R.id.btn_review);\r\n\r\n        // Lấy cafeId từ Intent\r\n        cafeId = getIntent().getStringExtra(\"cafeId\");\r\n\r\n        // Lấy thông tin quán từ Firestore\r\n        if (cafeId != null) {\r\n            db.collection(\"cafes\").document(cafeId).get()\r\n                    .addOnSuccessListener(documentSnapshot -> {\r\n                        if (documentSnapshot.exists()) {\r\n                            String cafeName = documentSnapshot.getString(\"name\");\r\n                            Double ratingStar = documentSnapshot.getDouble(\"ratingStar\");\r\n                            String address = documentSnapshot.getString(\"address\");\r\n                            String description = documentSnapshot.getString(\"description\");\r\n                            String image1 = documentSnapshot.getString(\"image1\");\r\n                            String activity = documentSnapshot.getString(\"activity\");\r\n\r\n                            // Hiển thị dữ liệu\r\n                            tvCafeName.setText(cafeName != null ? cafeName : \"Tên quán\");\r\n                            tvRating.setText(\"Đánh giá: \" + (ratingStar != null ? String.format(\"%.1f\", ratingStar) : \"0.0\") + \"/5\");\r\n                            tvAddress.setText(\"Địa chỉ: \" + (address != null ? address : \"Không có địa chỉ\"));\r\n                            tvDescription.setText(\"Mô tả: \" + (description != null ? description : \"Không có mô tả\"));\r\n                            tvActivity.setText(\"Hoạt động: \" + (activity != null ? activity : \"Không có hoạt động\"));\r\n\r\n                            // Hiển thị hình ảnh bằng Picasso\r\n                            if (image1 != null && !image1.isEmpty()) {\r\n                                Picasso.get().load(image1).into(ivCafeImage);\r\n                            } else {\r\n                                ivCafeImage.setImageResource(R.drawable.ic_placeholder); // Hình ảnh mặc định nếu không có\r\n                            }\r\n                        } else {\r\n                            Toast.makeText(this, \"Không tìm thấy thông tin quán!\", Toast.LENGTH_SHORT).show();\r\n                            finish();\r\n                        }\r\n                    })\r\n                    .addOnFailureListener(e -> {\r\n                        Toast.makeText(this, \"Lỗi khi tải thông tin quán!\", Toast.LENGTH_SHORT).show();\r\n                        finish();\r\n                    });\r\n        } else {\r\n            Toast.makeText(this, \"Không tìm thấy ID quán!\", Toast.LENGTH_SHORT).show();\r\n            finish();\r\n        }\r\n\r\n        // Khởi tạo ActivityResultLauncher để chọn hình ảnh\r\n        imagePickerLauncher = registerForActivityResult(\r\n                new ActivityResultContracts.GetContent(),\r\n                uri -> {\r\n                    if (uri != null) {\r\n                        if (selectedImages.size() < 3) {\r\n                            selectedImages.add(uri.toString()); // Giả lập URL\r\n                            Toast.makeText(this, \"Đã chọn \" + selectedImages.size() + \"/3 hình ảnh\", Toast.LENGTH_SHORT).show();\r\n                        } else {\r\n                            Toast.makeText(this, \"Đã đạt tối đa 3 hình ảnh!\", Toast.LENGTH_SHORT).show();\r\n                        }\r\n                    }\r\n                }\r\n        );\r\n\r\n        // Khởi tạo ActivityResultLauncher để chọn video\r\n        videoPickerLauncher = registerForActivityResult(\r\n                new ActivityResultContracts.GetContent(),\r\n                uri -> {\r\n                    if (uri != null) {\r\n                        if (selectedVideo == null) {\r\n                            selectedVideo = uri.toString(); // Giả lập URL\r\n                            Toast.makeText(this, \"Đã chọn video\", Toast.LENGTH_SHORT).show();\r\n                        } else {\r\n                            Toast.makeText(this, \"Chỉ được chọn 1 video!\", Toast.LENGTH_SHORT).show();\r\n                        }\r\n                    }\r\n                }\r\n        );\r\n\r\n        // Xử lý nút Đánh giá\r\n        btnReview.setOnClickListener(v -> showReviewDialog());\r\n    }\r\n\r\n    private void showReviewDialog() {\r\n        AlertDialog.Builder builder = new AlertDialog.Builder(this);\r\n        View dialogView = LayoutInflater.from(this).inflate(R.layout.dialog_review, null);\r\n        builder.setView(dialogView);\r\n\r\n        // Khởi tạo các thành phần trong dialog\r\n        RatingBar ratingBar = dialogView.findViewById(R.id.ratingBar);\r\n        EditText editTextComment = dialogView.findViewById(R.id.editTextComment);\r\n        Spinner spinnerActivity = dialogView.findViewById(R.id.spinnerActivity);\r\n        EditText editTextOtherActivity = dialogView.findViewById(R.id.editTextOtherActivity);\r\n        Button btnAddImages = dialogView.findViewById(R.id.btnAddImages);\r\n        Button btnAddVideo = dialogView.findViewById(R.id.btnAddVideo);\r\n        Button btnSubmitReview = dialogView.findViewById(R.id.btnSubmitReview);\r\n\r\n        // Thiết lập Spinner\r\n        ArrayAdapter<CharSequence> adapter = ArrayAdapter.createFromResource(\r\n                this,\r\n                R.array.activity_options,\r\n                android.R.layout.simple_spinner_item\r\n        );\r\n        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n        spinnerActivity.setAdapter(adapter);\r\n\r\n        // Xử lý khi chọn \"others\" trong Spinner\r\n        spinnerActivity.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\r\n                if (parent.getItemAtPosition(position).toString().equals(\"others\")) {\r\n                    editTextOtherActivity.setVisibility(View.VISIBLE);\r\n                } else {\r\n                    editTextOtherActivity.setVisibility(View.GONE);\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> parent) {\r\n                editTextOtherActivity.setVisibility(View.GONE);\r\n            }\r\n        });\r\n\r\n        // Xử lý nút thêm hình ảnh\r\n        btnAddImages.setOnClickListener(v -> {\r\n            imagePickerLauncher.launch(\"image/*\");\r\n        });\r\n\r\n        // Xử lý nút thêm video\r\n        btnAddVideo.setOnClickListener(v -> {\r\n            videoPickerLauncher.launch(\"video/*\");\r\n        });\r\n\r\n        // Xử lý nút gửi đánh giá\r\n        AlertDialog dialog = builder.create();\r\n        btnSubmitReview.setOnClickListener(v -> {\r\n            float rating = ratingBar.getRating();\r\n            String comment = editTextComment.getText().toString().trim();\r\n            String activity = spinnerActivity.getSelectedItem().toString();\r\n            String otherActivityDescription = editTextOtherActivity.getText().toString().trim();\r\n\r\n            // Kiểm tra dữ liệu\r\n            if (activity.equals(\"Chọn hoạt động\")) {\r\n                activity = null; // Để trống nếu không chọn\r\n            }\r\n            if (activity != null && activity.equals(\"others\") && otherActivityDescription.isEmpty()) {\r\n                Toast.makeText(this, \"Vui lòng nhập mô tả hoạt động!\", Toast.LENGTH_SHORT).show();\r\n                return;\r\n            }\r\n\r\n            // Lưu đánh giá vào Firestore\r\n            Map<String, Object> reviewData = new HashMap<>();\r\n            reviewData.put(\"userId\", userId);\r\n            reviewData.put(\"cafeId\", cafeId);\r\n            reviewData.put(\"rating\", rating);\r\n            reviewData.put(\"comment\", comment.isEmpty() ? null : comment);\r\n            reviewData.put(\"activity\", activity);\r\n            reviewData.put(\"otherActivityDescription\", activity != null && activity.equals(\"others\") ? otherActivityDescription : null);\r\n            reviewData.put(\"images\", selectedImages);\r\n            reviewData.put(\"video\", selectedVideo);\r\n            reviewData.put(\"timestamp\", com.google.firebase.firestore.FieldValue.serverTimestamp());\r\n\r\n            db.collection(\"reviews\").add(reviewData)\r\n                    .addOnSuccessListener(documentReference -> {\r\n                        Toast.makeText(this, \"Đánh giá thành công!\", Toast.LENGTH_SHORT).show();\r\n                        updateCafeRating(rating); // Cập nhật rating của quán\r\n                        updateUserPoints(); // Thêm 1 điểm cho đánh giá\r\n                        dialog.dismiss();\r\n                    })\r\n                    .addOnFailureListener(e -> Toast.makeText(this, \"Lỗi khi gửi đánh giá!\", Toast.LENGTH_SHORT).show());\r\n        });\r\n\r\n        dialog.show();\r\n    }\r\n\r\n    private void updateCafeRating(float newRating) {\r\n        DocumentReference cafeRef = db.collection(\"cafes\").document(cafeId);\r\n        cafeRef.get().addOnSuccessListener(documentSnapshot -> {\r\n            Long ratingCount = documentSnapshot.getLong(\"ratingCount\");\r\n            Double currentRating = documentSnapshot.getDouble(\"ratingStar\");\r\n\r\n            long newRatingCount = (ratingCount != null ? ratingCount : 0) + 1;\r\n            double totalRating = (currentRating != null ? currentRating * (newRatingCount - 1) : 0) + newRating;\r\n            double newAverageRating = totalRating / newRatingCount;\r\n\r\n            Map<String, Object> updates = new HashMap<>();\r\n            updates.put(\"ratingCount\", newRatingCount);\r\n            updates.put(\"ratingStar\", newAverageRating);\r\n\r\n            cafeRef.update(updates)\r\n                    .addOnSuccessListener(aVoid -> {\r\n                        tvRating.setText(\"Đánh giá: \" + String.format(\"%.1f\", newAverageRating) + \"/5\");\r\n                    })\r\n                    .addOnFailureListener(e -> Toast.makeText(this, \"Lỗi khi cập nhật đánh giá quán!\", Toast.LENGTH_SHORT).show());\r\n        });\r\n    }\r\n\r\n    private void updateUserPoints() {\r\n        DocumentReference userRef = db.collection(\"users\").document(userId);\r\n        userRef.get().addOnSuccessListener(documentSnapshot -> {\r\n            Long currentPoints = documentSnapshot.getLong(\"points\");\r\n            int newPoints = (currentPoints != null ? currentPoints.intValue() : 0) + 1;\r\n\r\n            userRef.update(\"points\", newPoints)\r\n                    .addOnSuccessListener(aVoid -> {\r\n                        // Có thể thêm thông báo nếu muốn\r\n                    })\r\n                    .addOnFailureListener(e -> Toast.makeText(this, \"Lỗi khi cập nhật điểm!\", Toast.LENGTH_SHORT).show());\r\n        });\r\n    }\r\n}
===================================================================
diff --git a/MyApplication/app/src/main/java/com/example/myapplication/Activities/CafeDetailActivity.java b/MyApplication/app/src/main/java/com/example/myapplication/Activities/CafeDetailActivity.java
--- a/MyApplication/app/src/main/java/com/example/myapplication/Activities/CafeDetailActivity.java	(revision cce15e85c4efd5bd1ba4b163663d0ba6d0363b42)
+++ b/MyApplication/app/src/main/java/com/example/myapplication/Activities/CafeDetailActivity.java	(date 1744137584663)
@@ -1,5 +1,6 @@
 package com.example.myapplication.Activities;
 
+import android.net.Uri;
 import android.os.Bundle;
 import android.view.LayoutInflater;
 import android.view.View;
@@ -21,11 +22,22 @@
 import com.google.firebase.firestore.DocumentReference;
 import com.google.firebase.firestore.FirebaseFirestore;
 import com.squareup.picasso.Picasso;
-
+import org.json.JSONObject;
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.InputStream;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import okhttp3.MediaType;
+import okhttp3.MultipartBody;
+import okhttp3.OkHttpClient;
+import okhttp3.Request;
+import okhttp3.RequestBody;
+import okhttp3.Response;
 
 public class CafeDetailActivity extends AppCompatActivity {
 
@@ -37,8 +49,9 @@
     private String cafeId, userId;
     private ActivityResultLauncher<String> imagePickerLauncher;
     private ActivityResultLauncher<String> videoPickerLauncher;
-    private List<String> selectedImages = new ArrayList<>(); // Lưu danh sách URL hình ảnh (giả lập)
-    private String selectedVideo = null; // Lưu URL video (giả lập)
+    private List<Uri> selectedImageUris = new ArrayList<>(); // Lưu danh sách URI hình ảnh
+    private List<String> uploadedImageUrls = new ArrayList<>(); // Lưu danh sách URL hình ảnh sau khi upload
+    private static final String IMGUR_CLIENT_ID = "44708ec159ebd14";
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
@@ -52,6 +65,10 @@
         // Lấy userId
         if (mAuth.getCurrentUser() != null) {
             userId = mAuth.getCurrentUser().getUid();
+        } else {
+            Toast.makeText(this, "Vui lòng đăng nhập để tiếp tục!", Toast.LENGTH_SHORT).show();
+            finish();
+            return;
         }
 
         // Khởi tạo các view
@@ -89,7 +106,7 @@
                             if (image1 != null && !image1.isEmpty()) {
                                 Picasso.get().load(image1).into(ivCafeImage);
                             } else {
-                                ivCafeImage.setImageResource(R.drawable.ic_placeholder); // Hình ảnh mặc định nếu không có
+                                ivCafeImage.setImageResource(R.drawable.ic_placeholder);
                             }
                         } else {
                             Toast.makeText(this, "Không tìm thấy thông tin quán!", Toast.LENGTH_SHORT).show();
@@ -97,7 +114,7 @@
                         }
                     })
                     .addOnFailureListener(e -> {
-                        Toast.makeText(this, "Lỗi khi tải thông tin quán!", Toast.LENGTH_SHORT).show();
+                        Toast.makeText(this, "Lỗi khi tải thông tin quán: " + e.getMessage(), Toast.LENGTH_SHORT).show();
                         finish();
                     });
         } else {
@@ -110,9 +127,9 @@
                 new ActivityResultContracts.GetContent(),
                 uri -> {
                     if (uri != null) {
-                        if (selectedImages.size() < 3) {
-                            selectedImages.add(uri.toString()); // Giả lập URL
-                            Toast.makeText(this, "Đã chọn " + selectedImages.size() + "/3 hình ảnh", Toast.LENGTH_SHORT).show();
+                        if (selectedImageUris.size() < 3) {
+                            selectedImageUris.add(uri);
+                            Toast.makeText(this, "Đã chọn " + selectedImageUris.size() + "/3 hình ảnh", Toast.LENGTH_SHORT).show();
                         } else {
                             Toast.makeText(this, "Đã đạt tối đa 3 hình ảnh!", Toast.LENGTH_SHORT).show();
                         }
@@ -120,23 +137,22 @@
                 }
         );
 
-        // Khởi tạo ActivityResultLauncher để chọn video
+        // Khởi tạo ActivityResultLauncher để chọn video (tạm thời vô hiệu hóa)
         videoPickerLauncher = registerForActivityResult(
                 new ActivityResultContracts.GetContent(),
                 uri -> {
-                    if (uri != null) {
-                        if (selectedVideo == null) {
-                            selectedVideo = uri.toString(); // Giả lập URL
-                            Toast.makeText(this, "Đã chọn video", Toast.LENGTH_SHORT).show();
-                        } else {
-                            Toast.makeText(this, "Chỉ được chọn 1 video!", Toast.LENGTH_SHORT).show();
-                        }
-                    }
+                    Toast.makeText(this, "Tính năng upload video không khả dụng!", Toast.LENGTH_SHORT).show();
                 }
         );
 
         // Xử lý nút Đánh giá
-        btnReview.setOnClickListener(v -> showReviewDialog());
+        btnReview.setOnClickListener(v -> {
+            if (mAuth.getCurrentUser() == null) {
+                Toast.makeText(this, "Vui lòng đăng nhập để đánh giá!", Toast.LENGTH_SHORT).show();
+                return;
+            }
+            showReviewDialog();
+        });
     }
 
     private void showReviewDialog() {
@@ -150,7 +166,6 @@
         Spinner spinnerActivity = dialogView.findViewById(R.id.spinnerActivity);
         EditText editTextOtherActivity = dialogView.findViewById(R.id.editTextOtherActivity);
         Button btnAddImages = dialogView.findViewById(R.id.btnAddImages);
-        Button btnAddVideo = dialogView.findViewById(R.id.btnAddVideo);
         Button btnSubmitReview = dialogView.findViewById(R.id.btnSubmitReview);
 
         // Thiết lập Spinner
@@ -181,17 +196,21 @@
 
         // Xử lý nút thêm hình ảnh
         btnAddImages.setOnClickListener(v -> {
+            if (mAuth.getCurrentUser() == null) {
+                Toast.makeText(this, "Vui lòng đăng nhập để thêm hình ảnh!", Toast.LENGTH_SHORT).show();
+                return;
+            }
             imagePickerLauncher.launch("image/*");
         });
 
-        // Xử lý nút thêm video
-        btnAddVideo.setOnClickListener(v -> {
-            videoPickerLauncher.launch("video/*");
-        });
-
         // Xử lý nút gửi đánh giá
         AlertDialog dialog = builder.create();
         btnSubmitReview.setOnClickListener(v -> {
+            if (mAuth.getCurrentUser() == null) {
+                Toast.makeText(this, "Vui lòng đăng nhập để gửi đánh giá!", Toast.LENGTH_SHORT).show();
+                return;
+            }
+
             float rating = ratingBar.getRating();
             String comment = editTextComment.getText().toString().trim();
             String activity = spinnerActivity.getSelectedItem().toString();
@@ -206,29 +225,129 @@
                 return;
             }
 
-            // Lưu đánh giá vào Firestore
-            Map<String, Object> reviewData = new HashMap<>();
-            reviewData.put("userId", userId);
-            reviewData.put("cafeId", cafeId);
-            reviewData.put("rating", rating);
-            reviewData.put("comment", comment.isEmpty() ? null : comment);
-            reviewData.put("activity", activity);
-            reviewData.put("otherActivityDescription", activity != null && activity.equals("others") ? otherActivityDescription : null);
-            reviewData.put("images", selectedImages);
-            reviewData.put("video", selectedVideo);
-            reviewData.put("timestamp", com.google.firebase.firestore.FieldValue.serverTimestamp());
+            // Upload hình ảnh lên Imgur và gửi đánh giá
+            uploadImagesToImgurAndSubmitReview(rating, comment, activity, otherActivityDescription, dialog);
+        });
+
+        dialog.show();
+    }
+
+    private void uploadImagesToImgurAndSubmitReview(float rating, String comment, String activity, String otherActivityDescription, AlertDialog dialog) {
+        uploadedImageUrls.clear();
+
+        if (selectedImageUris.isEmpty()) {
+            // Nếu không có hình ảnh, gửi đánh giá ngay
+            submitReview(rating, comment, activity, otherActivityDescription, dialog);
+            return;
+        }
+
+        ExecutorService executor = Executors.newFixedThreadPool(selectedImageUris.size());
+        for (Uri imageUri : selectedImageUris) {
+            executor.execute(() -> {
+                try {
+                    // Chuyển URI thành File
+                    File file = convertUriToFile(imageUri);
+
+                    // Upload hình ảnh lên Imgur
+                    String imageUrl = uploadImageToImgur(file);
+                    if (imageUrl != null) {
+                        synchronized (uploadedImageUrls) {
+                            uploadedImageUrls.add(imageUrl);
+                        }
+                    } else {
+                        runOnUiThread(() -> {
+                            Toast.makeText(this, "Lỗi khi upload hình ảnh!", Toast.LENGTH_SHORT).show();
+                            dialog.dismiss();
+                        });
+                        return;
+                    }
+
+                    // Kiểm tra nếu tất cả hình ảnh đã được upload
+                    synchronized (uploadedImageUrls) {
+                        if (uploadedImageUrls.size() == selectedImageUris.size()) {
+                            runOnUiThread(() -> submitReview(rating, comment, activity, otherActivityDescription, dialog));
+                        }
+                    }
+                } catch (Exception e) {
+                    runOnUiThread(() -> {
+                        Toast.makeText(this, "Lỗi khi upload hình ảnh: " + e.getMessage(), Toast.LENGTH_SHORT).show();
+                        dialog.dismiss();
+                    });
+                }
+            });
+        }
+        executor.shutdown();
+    }
+
+    private File convertUriToFile(Uri uri) throws Exception {
+        File file = new File(getCacheDir(), "temp_image_" + System.currentTimeMillis() + ".jpg");
+        try (InputStream inputStream = getContentResolver().openInputStream(uri);
+             FileOutputStream outputStream = new FileOutputStream(file)) {
+            byte[] buffer = new byte[1024];
+            int bytesRead;
+            while ((bytesRead = inputStream.read(buffer)) != -1) {
+                outputStream.write(buffer, 0, bytesRead);
+            }
+        }
+        return file;
+    }
+
+    private String uploadImageToImgur(File file) throws Exception {
+        OkHttpClient client = new OkHttpClient();
+        RequestBody requestBody = new MultipartBody.Builder()
+                .setType(MultipartBody.FORM)
+                .addFormDataPart("image", file.getName(),
+                        RequestBody.create(file, MediaType.parse("image/*")))
+                .build();
+
+        Request request = new Request.Builder()
+                .url("https://api.imgur.com/3/image")
+                .addHeader("Authorization", "Client-ID " + IMGUR_CLIENT_ID)
+                .post(requestBody)
+                .build();
+
+        try (Response response = client.newCall(request).execute()) {
+            if (!response.isSuccessful()) {
+                throw new Exception("Upload failed: " + response.message());
+            }
+
+            String responseBody = response.body().string();
+            JSONObject json = new JSONObject(responseBody);
+            if (json.getBoolean("success")) {
+                return json.getJSONObject("data").getString("link");
+            } else {
+                throw new Exception("Upload failed: " + json.getString("error"));
+            }
+        }
+    }
+
+    private void submitReview(float rating, String comment, String activity, String otherActivityDescription, AlertDialog dialog) {
+        // Lưu đánh giá vào Firestore
+        Map<String, Object> reviewData = new HashMap<>();
+        reviewData.put("userId", userId);
+        reviewData.put("cafeId", cafeId);
+        reviewData.put("rating", rating);
+        reviewData.put("comment", comment.isEmpty() ? null : comment);
+        reviewData.put("activity", activity);
+        reviewData.put("otherActivityDescription", activity != null && activity.equals("others") ? otherActivityDescription : null);
+        reviewData.put("images", uploadedImageUrls); // Lưu danh sách URL hình ảnh
+        reviewData.put("timestamp", com.google.firebase.firestore.FieldValue.serverTimestamp());
 
-            db.collection("reviews").add(reviewData)
-                    .addOnSuccessListener(documentReference -> {
-                        Toast.makeText(this, "Đánh giá thành công!", Toast.LENGTH_SHORT).show();
-                        updateCafeRating(rating); // Cập nhật rating của quán
-                        updateUserPoints(); // Thêm 1 điểm cho đánh giá
-                        dialog.dismiss();
-                    })
-                    .addOnFailureListener(e -> Toast.makeText(this, "Lỗi khi gửi đánh giá!", Toast.LENGTH_SHORT).show());
-        });
-
-        dialog.show();
+        db.collection("reviews").add(reviewData)
+                .addOnSuccessListener(documentReference -> {
+                    Toast.makeText(this, "Đánh giá thành công!", Toast.LENGTH_SHORT).show();
+                    updateCafeRating(rating); // Cập nhật rating của quán
+                    updateUserPoints(); // Thêm 1 điểm cho đánh giá
+                    dialog.dismiss();
+
+                    // Reset danh sách sau khi gửi đánh giá thành công
+                    selectedImageUris.clear();
+                    uploadedImageUrls.clear();
+                })
+                .addOnFailureListener(e -> {
+                    Toast.makeText(this, "Lỗi khi gửi đánh giá: " + e.getMessage(), Toast.LENGTH_SHORT).show();
+                    dialog.dismiss();
+                });
     }
 
     private void updateCafeRating(float newRating) {
